package models

import (
	"time"

	"github.com/hetu-project/Intelligence-KEY-Mining/pkg/vlc"
)

// TaskType represents different types of tasks
type TaskType string

const (
	TwitterRetweetTask TaskType = "twitter_retweet"
	DiscordMessageTask TaskType = "discord_message"
	EmailConfirmTask   TaskType = "email_confirm"
	// New task types
	TaskCreationTask      TaskType = "task_creation"
	BatchVerificationTask TaskType = "batch_verification"
	// Future extended task types
)

// TaskStatus represents the current status of a task
type TaskStatus string

const (
	TaskSubmitted           TaskStatus = "SUBMITTED"
	TaskPendingVerification TaskStatus = "PENDING_VERIFICATION"
	TaskVerified            TaskStatus = "VERIFIED"
	TaskFailed              TaskStatus = "FAILED"
	TaskMinerOutputCreated  TaskStatus = "MINER_OUTPUT_CREATED"
	TaskVoted               TaskStatus = "VOTED"
	TaskConfirmed           TaskStatus = "CONFIRMED"
	TaskRejected            TaskStatus = "REJECTED"
)

// Task represents a user task in the system
type Task struct {
	ID          string                 `json:"id" db:"id"`
	UserWallet  string                 `json:"user_wallet" db:"user_wallet"`
	TaskType    TaskType               `json:"task_type" db:"task_type"`
	Status      TaskStatus             `json:"status" db:"status"`
	Payload     map[string]interface{} `json:"payload" db:"payload"`
	Proof       *TaskProof             `json:"proof,omitempty" db:"proof"`
	Attempts    int                    `json:"attempts" db:"attempts"`
	CreatedAt   time.Time              `json:"created_at" db:"created_at"`
	UpdatedAt   time.Time              `json:"updated_at" db:"updated_at"`
	CompletedAt *time.Time             `json:"completed_at,omitempty" db:"completed_at"`
	VLCClock    *vlc.VectorClock       `json:"vlc_clock,omitempty"`
	EventID     string                 `json:"event_id,omitempty" db:"event_id"`
}

// TaskProof represents verification proof from middle layer
type TaskProof struct {
	Provider       string                 `json:"provider"`        // "twitter-middle-layer"
	VerifiedAt     time.Time              `json:"verified_at"`     // Verification time
	Evidence       map[string]interface{} `json:"evidence"`        // Evidence snapshot
	VerificationID string                 `json:"verification_id"` // Middleware verification ID
	Signature      string                 `json:"signature"`       // Middleware signature
}

// TwitterRetweetPayload represents Twitter retweet task payload
type TwitterRetweetPayload struct {
	TweetID    string `json:"tweet_id"`    // Tweet ID to retweet
	TwitterID  string `json:"twitter_id"`  // User Twitter ID
	RetweetURL string `json:"retweet_url"` // Retweet URL
}

// TaskCreationPayload represents task creation payload
type TaskCreationPayload struct {
	ProjectName     string `json:"project_name"`     // Project name
	ProjectIcon     string `json:"project_icon"`     // Project icon URL
	Description     string `json:"description"`      // Task description
	TwitterUsername string `json:"twitter_username"` // Twitter username
	TwitterLink     string `json:"twitter_link"`     // Twitter link
	TweetID         string `json:"tweet_id"`         // Tweet ID
}

// BatchVerificationPayload represents batch verification payload
type BatchVerificationPayload struct {
	StartTime string `json:"start_time"` // Verification start time
	EndTime   string `json:"end_time"`   // Verification end time
	BatchSize int    `json:"batch_size"` // Batch size
}

// MinerOutput represents the output generated by miner after task verification
type MinerOutput struct {
	TaskID    string                 `json:"task_id"`
	TaskType  string                 `json:"task_type"`
	MinerID   string                 `json:"miner_id"`
	EventID   string                 `json:"event_id"`
	VLCClock  *vlc.VectorClock       `json:"vlc_clock"`
	Payload   map[string]interface{} `json:"payload"`
	Proof     *TaskProof             `json:"proof"`
	Signature string                 `json:"signature"` // Miner signature
	Timestamp time.Time              `json:"timestamp"`
}

// API request response structures

// TaskCreationRequest represents task creation request
type TaskCreationRequest struct {
	UserWallet      string `json:"user_wallet" binding:"required"`
	ProjectName     string `json:"project_name" binding:"required"`
	ProjectIcon     string `json:"project_icon"`
	Description     string `json:"description" binding:"required"`
	TwitterUsername string `json:"twitter_username" binding:"required"`
	TwitterLink     string `json:"twitter_link" binding:"required"`
	TweetID         string `json:"tweet_id" binding:"required"`
}

// TaskCreationResponse represents task creation response
type TaskCreationResponse struct {
	Success  bool   `json:"success"`
	TaskID   string `json:"task_id,omitempty"`
	Message  string `json:"message"`
	VLCValue int    `json:"vlc_value,omitempty"` // Current VLC value
}

// BatchVerificationInfo represents batch verification info
type BatchVerificationInfo struct {
	TotalTasks      int `json:"total_tasks"`
	VerifiedTasks   int `json:"verified_tasks"`
	UnverifiedTasks int `json:"unverified_tasks"`
	VLCIncrement    int `json:"vlc_increment"`
}
